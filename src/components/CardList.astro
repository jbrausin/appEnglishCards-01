---
---

<div id="card-container" class="space-y-4">
	<!-- Las tarjetas se cargarán desde localStorage con JavaScript -->
	<p id="no-cards-message" class="text-gray-500 italic">No hay tarjetas de estudio todavía.</p>
</div>

<script>
	// Definir la interfaz para las tarjetas
	interface StudyCard {
		id: string;
		english: string;
		translation: string;
		learned: boolean;
	}

	// Cargar tarjetas desde localStorage
	const cardContainer: HTMLElement | null = document.getElementById('card-container');
	const noCardsMessage: HTMLElement | null = document.getElementById('no-cards-message');
	const cards: StudyCard[] = JSON.parse(localStorage.getItem('studyCards') || '[]');
	
	// Variables para el manejo de modales
	let currentCardId: string | null = null;
	const deleteModal: HTMLElement | null = document.getElementById('delete-modal');
	const editModal: HTMLElement | null = document.getElementById('edit-modal');
	const confirmEditModal: HTMLElement | null = document.getElementById('confirm-edit-modal');
	const editForm: HTMLFormElement | null = document.getElementById('edit-form') as HTMLFormElement;
	const editEnglishInput: HTMLInputElement | null = document.getElementById('edit-english') as HTMLInputElement;
	const editTranslationInput: HTMLInputElement | null = document.getElementById('edit-translation') as HTMLInputElement;

	// Funciones para modales
	function openDeleteModal(cardId: string): void {
		if (deleteModal) {
			currentCardId = cardId;
			deleteModal.classList.remove('hidden');
		}
	}

	function closeDeleteModal(): void {
		if (deleteModal) {
			currentCardId = null;
			deleteModal.classList.add('hidden');
		}
	}

	function openEditModal(card: StudyCard): void {
		if (editModal && editEnglishInput && editTranslationInput) {
			currentCardId = card.id;
			editEnglishInput.value = card.english;
			editTranslationInput.value = card.translation;
			editModal.classList.remove('hidden');
		}
	}

	function closeEditModal(): void {
		if (editModal) {
			currentCardId = null;
			editModal.classList.add('hidden');
		}
	}

	function openConfirmEditModal(): void {
		if (confirmEditModal) {
			confirmEditModal.classList.remove('hidden');
		}
	}

	function closeConfirmEditModal(): void {
		if (confirmEditModal) {
			confirmEditModal.classList.add('hidden');
		}
	}

	// Configurar los manejadores de eventos para los botones de los modales
	document.getElementById('cancel-delete')?.addEventListener('click', closeDeleteModal);
	document.getElementById('cancel-edit')?.addEventListener('click', closeEditModal);
	document.getElementById('cancel-edit-confirm')?.addEventListener('click', closeConfirmEditModal);

	document.getElementById('confirm-delete')?.addEventListener('click', () => {
		if (currentCardId) {
			// Filtrar la tarjeta a eliminar
			const updatedCards = cards.filter(card => card.id !== currentCardId);
			
			// Guardar en localStorage
			localStorage.setItem('studyCards', JSON.stringify(updatedCards));
			
			// Cerrar el modal y recargar la página
			closeDeleteModal();
			window.location.reload();
		}
	});

	// Manejar el envío del formulario de edición
	editForm?.addEventListener('submit', (e: Event) => {
		e.preventDefault();
		
		// Mostrar el modal de confirmación
		openConfirmEditModal();
	});

	// Manejar la confirmación de la edición
	document.getElementById('confirm-edit-changes')?.addEventListener('click', () => {
		if (currentCardId && editEnglishInput && editTranslationInput) {
			const english = editEnglishInput.value.trim();
			const translation = editTranslationInput.value.trim();
			
			if (english && translation) {
				// Actualizar la tarjeta
				const updatedCards = cards.map(card => {
					if (card.id === currentCardId) {
						return { ...card, english, translation };
					}
					return card;
				});
				
				// Guardar en localStorage
				localStorage.setItem('studyCards', JSON.stringify(updatedCards));
				
				// Cerrar los modales y recargar la página
				closeConfirmEditModal();
				closeEditModal();
				window.location.reload();
			}
		}
	});
	
	if (cards.length > 0 && noCardsMessage && cardContainer) {
		noCardsMessage.remove();
		
		cards.forEach((card: StudyCard) => {
			const cardElement: HTMLDivElement = document.createElement('div');
			cardElement.className = `bg-white rounded-lg shadow-md overflow-hidden ${card.learned ? 'border-l-4 border-green-500' : ''}`;
			
			// Escapar los valores para prevenir XSS
			const escapeHtml = (str: string): string => {
				return str
					.replace(/&/g, "&amp;")
					.replace(/</g, "&lt;")
					.replace(/>/g, "&gt;")
					.replace(/"/g, "&quot;")
					.replace(/'/g, "&#039;");
			};
			
			cardElement.innerHTML = `
				<div class="p-5">
					<h3 class="text-lg font-bold">${escapeHtml(card.english)}</h3>
					<p class="text-gray-600">${escapeHtml(card.translation)}</p>
				</div>
				<div class="bg-gray-50 px-5 py-3 flex justify-between">
					<button 
						data-toggle-learned 
						data-card-id="${card.id}" 
						class="text-sm font-medium ${card.learned ? 'text-green-600' : 'text-gray-600'}"
					>
						${card.learned ? 'Aprendida' : 'Marcar como aprendida'}
					</button>
					<div class="flex space-x-2">
						<button 
							data-edit-card 
							data-card-id="${card.id}" 
							class="text-gray-500 hover:text-gray-700"
						>
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
								<path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
							</svg>
						</button>
						<button 
							data-delete-card 
							data-card-id="${card.id}" 
							class="text-red-500 hover:text-red-700"
						>
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
								<path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
							</svg>
						</button>
					</div>
				</div>
			`;
			
			cardContainer.appendChild(cardElement);
		});

		// Configurar manejadores de eventos para los botones de las tarjetas
		document.querySelectorAll('[data-edit-card]').forEach((button: Element) => {
			button.addEventListener('click', (e: Event) => {
				const target = e.currentTarget as HTMLElement;
				const id = target.getAttribute('data-card-id');
				if (id) {
					const card = cards.find(card => card.id === id);
					if (card) {
						openEditModal(card);
					}
				}
			});
		});

		document.querySelectorAll('[data-delete-card]').forEach((button: Element) => {
			button.addEventListener('click', (e: Event) => {
				const target = e.currentTarget as HTMLElement;
				const id = target.getAttribute('data-card-id');
				if (id) {
					openDeleteModal(id);
				}
			});
		});

		document.querySelectorAll('[data-toggle-learned]').forEach((button: Element) => {
			button.addEventListener('click', (e: Event) => {
				const target = e.currentTarget as HTMLElement;
				const id = target.getAttribute('data-card-id');
				if (id) {
					cards.forEach((card, index) => {
						if (card.id === id) {
							cards[index].learned = !card.learned;
						}
					});
					
					// Guardar en localStorage
					localStorage.setItem('studyCards', JSON.stringify(cards));
					window.location.reload();
				}
			});
		});
	}
</script>